// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: internal/protobuf/schema/fleet.proto

package fleet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetServiceClient is the client API for FleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetServiceClient interface {
	ListVehicles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VehicleList, error)
	AddVehicle(ctx context.Context, in *VehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error)
}

type fleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetServiceClient(cc grpc.ClientConnInterface) FleetServiceClient {
	return &fleetServiceClient{cc}
}

func (c *fleetServiceClient) ListVehicles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VehicleList, error) {
	out := new(VehicleList)
	err := c.cc.Invoke(ctx, "/fleet.FleetService/ListVehicles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) AddVehicle(ctx context.Context, in *VehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error) {
	out := new(VehicleResponse)
	err := c.cc.Invoke(ctx, "/fleet.FleetService/AddVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServiceServer is the server API for FleetService service.
// All implementations must embed UnimplementedFleetServiceServer
// for forward compatibility
type FleetServiceServer interface {
	ListVehicles(context.Context, *emptypb.Empty) (*VehicleList, error)
	AddVehicle(context.Context, *VehicleRequest) (*VehicleResponse, error)
	mustEmbedUnimplementedFleetServiceServer()
}

// UnimplementedFleetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFleetServiceServer struct {
}

func (UnimplementedFleetServiceServer) ListVehicles(context.Context, *emptypb.Empty) (*VehicleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedFleetServiceServer) AddVehicle(context.Context, *VehicleRequest) (*VehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVehicle not implemented")
}
func (UnimplementedFleetServiceServer) mustEmbedUnimplementedFleetServiceServer() {}

// UnsafeFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServiceServer will
// result in compilation errors.
type UnsafeFleetServiceServer interface {
	mustEmbedUnimplementedFleetServiceServer()
}

func RegisterFleetServiceServer(s grpc.ServiceRegistrar, srv FleetServiceServer) {
	s.RegisterService(&FleetService_ServiceDesc, srv)
}

func _FleetService_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.FleetService/ListVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).ListVehicles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_AddVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).AddVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.FleetService/AddVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).AddVehicle(ctx, req.(*VehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetService_ServiceDesc is the grpc.ServiceDesc for FleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.FleetService",
	HandlerType: (*FleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVehicles",
			Handler:    _FleetService_ListVehicles_Handler,
		},
		{
			MethodName: "AddVehicle",
			Handler:    _FleetService_AddVehicle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protobuf/schema/fleet.proto",
}
