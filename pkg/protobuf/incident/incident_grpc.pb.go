// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: internal/protobuf/schema/incident.proto

package incident

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncidentServiceClient is the client API for IncidentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncidentServiceClient interface {
	ListIncidents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IncidentList, error)
	GetIncidentsByAnimalGroup(ctx context.Context, in *GetIncidentsByAnimalGroupRequest, opts ...grpc.CallOption) (*IncidentList, error)
	GetYearStats(ctx context.Context, in *GetIncidentsStatsRequest, opts ...grpc.CallOption) (*GetIncidentsStatsResponse, error)
}

type incidentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncidentServiceClient(cc grpc.ClientConnInterface) IncidentServiceClient {
	return &incidentServiceClient{cc}
}

func (c *incidentServiceClient) ListIncidents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IncidentList, error) {
	out := new(IncidentList)
	err := c.cc.Invoke(ctx, "/incident.IncidentService/ListIncidents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) GetIncidentsByAnimalGroup(ctx context.Context, in *GetIncidentsByAnimalGroupRequest, opts ...grpc.CallOption) (*IncidentList, error) {
	out := new(IncidentList)
	err := c.cc.Invoke(ctx, "/incident.IncidentService/GetIncidentsByAnimalGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) GetYearStats(ctx context.Context, in *GetIncidentsStatsRequest, opts ...grpc.CallOption) (*GetIncidentsStatsResponse, error) {
	out := new(GetIncidentsStatsResponse)
	err := c.cc.Invoke(ctx, "/incident.IncidentService/GetYearStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncidentServiceServer is the server API for IncidentService service.
// All implementations must embed UnimplementedIncidentServiceServer
// for forward compatibility
type IncidentServiceServer interface {
	ListIncidents(context.Context, *emptypb.Empty) (*IncidentList, error)
	GetIncidentsByAnimalGroup(context.Context, *GetIncidentsByAnimalGroupRequest) (*IncidentList, error)
	GetYearStats(context.Context, *GetIncidentsStatsRequest) (*GetIncidentsStatsResponse, error)
	mustEmbedUnimplementedIncidentServiceServer()
}

// UnimplementedIncidentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncidentServiceServer struct {
}

func (UnimplementedIncidentServiceServer) ListIncidents(context.Context, *emptypb.Empty) (*IncidentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncidents not implemented")
}
func (UnimplementedIncidentServiceServer) GetIncidentsByAnimalGroup(context.Context, *GetIncidentsByAnimalGroupRequest) (*IncidentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidentsByAnimalGroup not implemented")
}
func (UnimplementedIncidentServiceServer) GetYearStats(context.Context, *GetIncidentsStatsRequest) (*GetIncidentsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYearStats not implemented")
}
func (UnimplementedIncidentServiceServer) mustEmbedUnimplementedIncidentServiceServer() {}

// UnsafeIncidentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncidentServiceServer will
// result in compilation errors.
type UnsafeIncidentServiceServer interface {
	mustEmbedUnimplementedIncidentServiceServer()
}

func RegisterIncidentServiceServer(s grpc.ServiceRegistrar, srv IncidentServiceServer) {
	s.RegisterService(&IncidentService_ServiceDesc, srv)
}

func _IncidentService_ListIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).ListIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incident.IncidentService/ListIncidents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).ListIncidents(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_GetIncidentsByAnimalGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentsByAnimalGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).GetIncidentsByAnimalGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incident.IncidentService/GetIncidentsByAnimalGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).GetIncidentsByAnimalGroup(ctx, req.(*GetIncidentsByAnimalGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_GetYearStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).GetYearStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incident.IncidentService/GetYearStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).GetYearStats(ctx, req.(*GetIncidentsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncidentService_ServiceDesc is the grpc.ServiceDesc for IncidentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncidentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "incident.IncidentService",
	HandlerType: (*IncidentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIncidents",
			Handler:    _IncidentService_ListIncidents_Handler,
		},
		{
			MethodName: "GetIncidentsByAnimalGroup",
			Handler:    _IncidentService_GetIncidentsByAnimalGroup_Handler,
		},
		{
			MethodName: "GetYearStats",
			Handler:    _IncidentService_GetYearStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protobuf/schema/incident.proto",
}
